{"version":3,"sources":["webpack://test/webpack/universalModuleDefinition","webpack://test/./src/waveWorker.js"],"names":["WavePCM","config","Object","assign","wavBitDepth","numberOfChannels","Error","indexOf","bitDepth","sampleRate","recordedBuffers","bytesPerSample","prototype","record","buffers","bufferLength","length","reducedData","Uint8Array","i","channel","outputIndex","sample","Math","max","min","push","requestData","dataLength","headerLength","wav","view","DataView","buffer","setUint32","setUint16","set","message","page","registerProcessor","EncoderWorklet","continueProcess","port","onmessage","data","recorder","postPage","postMessage","inputs","pageData","AudioWorkletProcessor","postPageGlobal","close","module","exports"],"mappings":"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","file":"waveWorker.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"test\"] = factory();\n\telse\n\t\troot[\"test\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn ","\"use strict\";\n\nconst WavePCM = function( config ){\n\n  var config = Object.assign({\n    wavBitDepth: 16,\n    numberOfChannels: 1,\n  }, config);\n\n  if ( !config['wavSampleRate'] ) {\n    throw new Error(\"wavSampleRate value is required to record. NOTE: Audio is not resampled!\");\n  }\n\n  if ( [8, 16, 24, 32].indexOf( config['wavBitDepth'] ) === -1 ) {\n    throw new Error(\"Only 8, 16, 24 and 32 bits per sample are supported\");\n  }\n\n  this.numberOfChannels = config['numberOfChannels'];\n  this.bitDepth = config['wavBitDepth'];\n  this.sampleRate = config['wavSampleRate'];\n  this.recordedBuffers = [];\n  this.bytesPerSample = this.bitDepth / 8;\n};\n\nWavePCM.prototype.record = function( buffers ){\n  var bufferLength = buffers[0].length;\n  var reducedData = new Uint8Array( bufferLength * this.numberOfChannels * this.bytesPerSample );\n\n  // Interleave\n  for ( var i = 0; i < bufferLength; i++ ) {\n    for ( var channel = 0; channel < this.numberOfChannels; channel++ ) {\n\n      var outputIndex = ( i * this.numberOfChannels + channel ) * this.bytesPerSample;\n\n      // clip the signal if it exceeds [-1, 1]\n      var sample = Math.max(-1, Math.min(1, buffers[ channel ][ i ]));\n\n      // bit reduce and convert to integer\n      switch ( this.bytesPerSample ) {\n        case 4: // 32 bits signed\n          sample = sample * 2147483647.5 - 0.5;\n          reducedData[ outputIndex ] = sample;\n          reducedData[ outputIndex + 1 ] = sample >> 8;\n          reducedData[ outputIndex + 2 ] = sample >> 16;\n          reducedData[ outputIndex + 3 ] = sample >> 24;\n          break;\n\n        case 3: // 24 bits signed\n          sample = sample * 8388607.5 - 0.5;\n          reducedData[ outputIndex ] = sample;\n          reducedData[ outputIndex + 1 ] = sample >> 8;\n          reducedData[ outputIndex + 2 ] = sample >> 16;\n          break;\n\n        case 2: // 16 bits signed\n          sample = sample * 32767.5 - 0.5;\n          reducedData[ outputIndex ] = sample;\n          reducedData[ outputIndex + 1 ] = sample >> 8;\n          break;\n\n        case 1: // 8 bits unsigned\n          reducedData[ outputIndex ] = (sample + 1) * 127.5;\n          break;\n\n        default:\n          throw new Error(\"Only 8, 16, 24 and 32 bits per sample are supported\");\n      }\n    }\n  }\n\n  this.recordedBuffers.push( reducedData );\n};\n\nWavePCM.prototype.requestData = function(){\n  var bufferLength = this.recordedBuffers[0].length;\n  var dataLength = this.recordedBuffers.length * bufferLength;\n  var headerLength = 44;\n  var wav = new Uint8Array( headerLength + dataLength );\n  var view = new DataView( wav.buffer );\n\n  view.setUint32( 0, 1380533830, false ); // RIFF identifier 'RIFF'\n  view.setUint32( 4, 36 + dataLength, true ); // file length minus RIFF identifier length and file description length\n  view.setUint32( 8, 1463899717, false ); // RIFF type 'WAVE'\n  view.setUint32( 12, 1718449184, false ); // format chunk identifier 'fmt '\n  view.setUint32( 16, 16, true ); // format chunk length\n  view.setUint16( 20, 1, true ); // sample format (raw)\n  view.setUint16( 22, this.numberOfChannels, true ); // channel count\n  view.setUint32( 24, this.sampleRate, true ); // sample rate\n  view.setUint32( 28, this.sampleRate * this.bytesPerSample * this.numberOfChannels, true ); // byte rate (sample rate * block align)\n  view.setUint16( 32, this.bytesPerSample * this.numberOfChannels, true ); // block align (channel count * bytes per sample)\n  view.setUint16( 34, this.bitDepth, true ); // bits per sample\n  view.setUint32( 36, 1684108385, false); // data chunk identifier 'data'\n  view.setUint32( 40, dataLength, true ); // data chunk length\n\n  for (var i = 0; i < this.recordedBuffers.length; i++ ) {\n    wav.set( this.recordedBuffers[i], i * bufferLength + headerLength );\n  }\n\n  return {message: 'page', page: wav};\n};\n\n\n// Run in AudioWorkletGlobal scope\nif (typeof registerProcessor === 'function') {\n\n  class EncoderWorklet extends AudioWorkletProcessor {\n\n    constructor(){\n      super();\n      this.continueProcess = true;\n      this.port.onmessage = ({ data }) => {\n        switch( data['command'] ){\n\n          case 'done':\n            if (this.recorder) {\n              this.postPage(this.recorder.requestData());\n              this.port.postMessage( {message: 'done'} );\n              delete this.recorder;\n            }\n            break;\n\n          case 'close':\n            this.continueProcess = false;\n            break;\n\n          case 'init':\n            this.recorder = new WavePCM( data );\n            this.port.postMessage( {message: 'ready'} );\n            break;\n\n          default:\n            // Ignore any unknown commands and continue recieving commands\n        }\n      }\n    }\n\n    process(inputs) {\n      if (this.recorder && inputs[0] && inputs[0].length && inputs[0][0] && inputs[0][0].length){\n        this.recorder.record( inputs[0] );\n      }\n      return this.continueProcess;\n    }\n\n    postPage(pageData) {\n      if (pageData) {\n        this.port.postMessage( pageData, [pageData.page.buffer] );\n      }\n    }\n  }\n\n  registerProcessor('encoder-worklet', EncoderWorklet);\n}\n\n// run in scriptProcessor worker scope\nelse {\n  var recorder;\n  var postPageGlobal = (pageData) => {\n    if (pageData) {\n      postMessage( pageData, [pageData.page.buffer] );\n    }\n  }\n\n  onmessage = ({ data }) => {\n\n    switch( data['command'] ){\n\n      case 'encode':\n        if (recorder) {\n          recorder.record( data['buffers'] );\n        }\n        break;\n\n      case 'done':\n        if (recorder) {\n          postPageGlobal(recorder.requestData());\n          postMessage( {message: 'done'} );\n          recorder = null;\n        }\n        break;\n\n      case 'close':\n        close();\n        break;\n\n      case 'init':\n        recorder = new WavePCM( data );\n        postMessage( {message: 'ready'} );\n        break;\n\n      default:\n        // Ignore any unknown commands and continue recieving commands\n    }\n  };\n}\n\n\n// Exports for unit testing.\nvar module = module || {};\nmodule.exports = WavePCM;\n"],"sourceRoot":""}